{"version":3,"file":"static/js/914.ffe36cfa.chunk.js","mappings":"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","sources":["Components/DatasetDownload/DatasetCalendar.jsx","Components/DatasetDownload/DatasetDownloadDialog.jsx","Components/CollapsibleSubtitle.jsx","Pages/Project.jsx"],"sourcesContent":["import dayjs from 'dayjs';\nimport { styled } from '@mui/material/styles';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { PickersDay } from '@mui/x-date-pickers/PickersDay';\nimport { DateCalendar } from '@mui/x-date-pickers/DateCalendar';\nimport { DayCalendarSkeleton } from '@mui/x-date-pickers/DayCalendarSkeleton';\nimport Card from '@mui/material/Card';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\n\nconst HighlightedDay = styled(PickersDay)(({ theme }) => ({\n  // styles for dot\n  '&:after, :hover::after': {\n    content: '\".\"',\n    fontSize: '1.5rem',\n    bottom: '-0.5rem',\n    position: 'absolute',\n    color: theme.palette.primary.main,\n    opacity: 0.5\n  },\n  '&:hover::after': {\n    opacity: 1\n  }\n}));\n\nfunction isValidDate(date, validDates) {\n  return validDates.indexOf(dayjs(date).format('YYYY-MM-DD')) >= 0;\n}\n\nfunction CustomDayComponent(props) {\n  const { versionDates = [], day, ...other } = props;\n\n  const isHighlighted = versionDates.indexOf(dayjs(day).format('YYYY-MM-DD')) >= 0;\n\n  return (\n    isHighlighted\n      ? <HighlightedDay {...other} day={day} />\n      : <PickersDay {...other} day={day} />\n  );\n}\n\nexport default function DatasetCalendar(props) {\n  const { smallScreen, onChange, versions } = props;\n\n  const versionDates = versions\n    .filter((version) => version.version.length === 10) // valid date\n    .map((version) => version.version);\n\n  return (\n    <ClickAwayListener onClickAway={() => onChange('close')}>\n      <Card\n        sx={!smallScreen && { position: 'absolute', right: 0, zIndex: 999 }}\n        raised\n      >\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DateCalendar\n            loading={!versionDates}\n            format=\"YYYY-MM-DD\"\n            renderLoading={() => <DayCalendarSkeleton />}\n            slots={{\n              day: CustomDayComponent,\n            }}\n            onChange={(value, selectionState) => {\n              if (selectionState === 'finish') {\n                return onChange(dayjs(value).format('YYYY-MM-DD'));\n              }\n              return null;\n            }}\n            slotProps={{\n              day: {\n                versionDates\n              }\n            }}\n            // disable the date if its not a valid date\n            shouldDisableDate={(day) => !isValidDate(day, versionDates)}\n            disableHighlightToday\n            minDate={dayjs(versionDates.slice(-1)[0])}\n            maxDate={dayjs(versionDates[0])}\n          />\n        </LocalizationProvider>\n      </Card>\n    </ClickAwayListener>\n  );\n}\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { Container, Avatar, Modal, Tooltip, Box, Link, Typography, Stack, Select, FormControl, MenuItem, Grid, Chip, Dialog, Button, DialogActions, DialogContent, useMediaQuery, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nimport { RawDatasetsMetadataContext } from '../../ContextProviders/RawDatasetsMetadataContext';\n\nimport DownloadIcon from '@mui/icons-material/Download';\nimport DataObjectIcon from '@mui/icons-material/DataObject';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport EventIcon from '@mui/icons-material/Event';\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport { fetchDataFromURL } from './DatasetFetcher';\nimport DatasetCalendar from './DatasetCalendar';\n\nexport default function DatasetDownloadDialog(props) {\n  const { project } = props;\n  const rawDatasetsMetadata = useContext(RawDatasetsMetadataContext);\n  const [datasets, setDatasets] = useState();\n\n  useEffect(() => {\n    if (!project || !rawDatasetsMetadata) return;\n    setDatasets(rawDatasetsMetadata[project?.id]); // get all the dataset(s) of this project\n  }, [project, rawDatasetsMetadata]);\n\n  const theme = useTheme();\n  const smallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          handleOpen();\n          Tracking.sendEventAnalytics(Tracking.Events.rawDatasetButtonClicked, {\n            project_id: project.id\n          });\n        }}\n        variant=\"contained\"\n      >\n        <DataObjectIcon sx={{ fontSize: '1rem' }} />&nbsp;Raw Dataset\n      </Button>\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        maxWidth=\"lg\"\n        fullWidth\n        fullScreen={smallScreen}\n        keepMounted\n      >\n        {(\n          smallScreen &&\n          <DialogActions sx={{ justifyContent: \"start\" }}>\n            <Button autoFocus onClick={handleClose}>\n              <ChevronLeftIcon sx={{ fontSize: '1rem' }} />Back\n            </Button>\n          </DialogActions>\n        )}\n\n        <DialogContent sx={{\n          px: smallScreen ? 2 : 3,\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'start',\n          height: '100%'\n        }}>\n          <Chip label={project.title} size=\"small\" sx={{ mb: 1 }} />\n          <Typography variant=\"h6\" >\n            Preview and download raw dataset(s)\n          </Typography>\n\n          <DatasetSelectorAndPreviewer datasets={datasets} smallScreen={smallScreen} project={project} />\n          {\n            datasets &&\n            <Typography variant=\"caption\" sx={{ my: 3, fontStyle: 'italic' }} >\n              This dataset is provided by the CITIES Dashboard with the support of {project.owner}. Should you intend to utilize this dataset for your project, research, or publication, we kindly request that you notify us at <Link href='mailto:nyuad.cities@nyu.edu'>nyuad.cities@nyu.edu</Link> to discuss citation requirements.\n            </Typography>\n          }\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nconst DatasetSelectorAndPreviewer = (props) => {\n  const { datasets, smallScreen, project } = props;\n  const [previewingDataset, setPreviewingDataset] = useState();\n  const [previewingDatasetId, setPreviewingDatasetId] = useState();\n\n  // Preview the first version of the first dataset initially\n  useEffect(() => {\n    if (datasets?.length > 0) {\n      setPreviewingDataset(datasets[0]?.versions[0]);\n      setPreviewingDatasetId(datasets[0]?.id);\n      fetchDataFromURL(datasets[0]?.versions[0]?.rawLink, 'csv').then((data) => {\n        setPreviewingDataset({ ...datasets[0]?.versions[0], fetchedDataset: data });\n      });\n    }\n  }, [datasets]);\n\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"start\" spacing={3}>\n      <Grid item sm={12} md={6}>\n        <DatasetsTable\n          datasets={datasets}\n          smallScreen={smallScreen}\n          previewingDataset={previewingDataset}\n          setPreviewingDataset={setPreviewingDataset}\n          previewingDatasetId={previewingDatasetId}\n          setPreviewingDatasetId={setPreviewingDatasetId}\n        />\n      </Grid>\n      <Grid item sm={12} md={6} maxWidth={smallScreen ? '100%' : 'unset'} sx={{ mt: 1 }}>\n        <PreviewDataset\n          previewingDataset={previewingDataset}\n          previewingDatasetId={previewingDatasetId}\n          project={project}\n          smallScreen={smallScreen}\n        />\n      </Grid>\n    </Grid>\n  )\n};\n\nconst DatasetsTable = (props) => {\n  const { datasets, smallScreen, previewingDataset, setPreviewingDataset, previewingDatasetId, setPreviewingDatasetId } = props;\n  return (\n    <Table\n      size=\"small\"\n      sx={{\n        tableLayout: 'fixed',\n        '& td, div, .MuiMenuItem-root': {\n          fontSize: smallScreen ? '0.625rem' : '0.8rem'\n        }\n      }}\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell sx={{ pl: 1 }}>\n            Dataset\n          </TableCell>\n          <TableCell sx={{ width: smallScreen ? '9.5rem' : '11rem' }}>Version</TableCell>\n          <TableCell sx={{ width: smallScreen ? '5rem' : '6rem' }}>\n            Size\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {datasets?.map((dataset) => (\n          <Dataset\n            key={dataset.id}\n            smallScreen={smallScreen}\n            dataset={dataset}\n            previewingDataset={previewingDataset}\n            setPreviewingDataset={setPreviewingDataset}\n            isPreviewing={dataset.id === previewingDatasetId}\n            setPreviewingDatasetId={setPreviewingDatasetId}\n          />\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n\nconst Dataset = (props) => {\n  const { smallScreen, dataset, setPreviewingDataset, isPreviewing, previewingDatasetId, setPreviewingDatasetId } = props;\n\n  const [fetchedDatasets, setFetchedDatasets] = useState({});\n  const NUM_RECENT_VERSIONS = 3;\n\n  const latestVersionOfThisDataset = dataset?.versions[0] || {};\n  const [showCalendar, setShowCalendar] = useState(false);\n  const [selectedVersionOfThisDataset, setSelectedVersionOfThisDataset] = useState(latestVersionOfThisDataset);\n\n  // only show NUM_RECENT_VERSIONS rows in Dropdown\n  const visibleVersions = dataset?.versions.slice(0, NUM_RECENT_VERSIONS);\n  // if currently selected version is not in first NUM_RECENT_VERSION rows,\n  // add it to the list\n  if (!visibleVersions.find((version) => version == selectedVersionOfThisDataset)) {\n    visibleVersions.push({ ...selectedVersionOfThisDataset, isOlderVersion: true });\n  }\n\n  // only show Calendar option if there are more than NUM_RECENT_VERSIONS versions\n  const shouldShowCalendar = dataset?.versions.length > NUM_RECENT_VERSIONS;\n\n  const handleVersionChange = (event) => {\n    const selectedVal = event.target.value;\n    if (selectedVal === 'Calendar') {\n      setShowCalendar(true);\n      return;\n    }\n    // Loop through the array (allVersionsOfThisDataset) to find the one with the selected version\n    const selectedVersion = dataset?.versions.find(aDatasetVersion => {\n      return aDatasetVersion.version === selectedVal;\n    });\n    setSelectedVersionOfThisDataset(selectedVersion);\n    setPreviewingDatasetId(dataset.id);\n    setPreviewingDataset(selectedVersion);\n\n    fetchThisDataset(selectedVersion);\n  };\n\n  const handleCalendarChange = (event) => {\n    // close calendar after selecting\n    setShowCalendar(false)\n    if (event === 'close') { // click outside of card\n      return\n    }\n\n    handleVersionChange({ target: { value: event } });\n  }\n\n  const fetchThisDataset = (selectedVersion) => {\n    // If this dataset version hasn't been fetched yet,\n    // fetch it and append it into the object fetchedDatasets\n    if (!fetchedDatasets[selectedVersion.version]) {\n      fetchDataFromURL(selectedVersion.rawLink, 'csv').then((data) => {\n        const selectedVersionWithFetchedDataset = { ...selectedVersion, fetchedDataset: data };\n        setPreviewingDataset(selectedVersionWithFetchedDataset);\n        setFetchedDatasets({\n          ...fetchedDatasets,\n          [selectedVersionWithFetchedDataset.version]: selectedVersionWithFetchedDataset\n        });\n      });\n    }\n    // If it has been fetched before, simply get it from memory \n    else {\n      setPreviewingDataset(fetchedDatasets[selectedVersion.version]);\n    }\n  }\n\n  const setThisDatasetToPreview = () => {\n    if (previewingDatasetId !== dataset.id) {\n      setPreviewingDatasetId(dataset.id);\n      setPreviewingDataset(selectedVersionOfThisDataset);\n      fetchThisDataset(selectedVersionOfThisDataset);\n    }\n  }\n\n  const theme = useTheme();\n\n  const formatFileSize = (sizeInBytes) => {\n    if (!sizeInBytes) return;\n\n    if (sizeInBytes < 1024 * 1024) {\n      return (sizeInBytes / 1024).toFixed(1) + \" KB\";\n    } else {\n      return (sizeInBytes / (1024 * 1024)).toFixed(1) + \" MB\";\n    }\n  }\n\n  return (\n    <>\n      <TableRow key={dataset.id}>\n        <TableCell\n          sx={{\n            pl: 1,\n            cursor: 'pointer',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}\n          onClick={setThisDatasetToPreview}>\n          {selectedVersionOfThisDataset?.name}\n        </TableCell>\n\n        <TableCell sx={{ position: 'relative', background: isPreviewing && theme.palette.background.NYUpurpleLight }}>\n          {showCalendar &&\n            (smallScreen ? <Modal\n              open={showCalendar}\n              sx={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n              }}\n            >\n              <DatasetCalendar\n                onChange={handleCalendarChange}\n                smallScreen={smallScreen}\n                versions={dataset?.versions}\n              />\n            </Modal>\n              : <DatasetCalendar\n                onChange={handleCalendarChange}\n                versions={dataset?.versions}\n              />)}\n          <FormControl size=\"small\">\n            <Select\n              value={selectedVersionOfThisDataset?.version}\n              onClick={() => {\n                if (dataset.versions.length <= 1) setThisDatasetToPreview();\n              }}\n              onChange={handleVersionChange}\n              variant=\"standard\"\n              MenuProps={{ disablePortal: true }}\n            >\n              {visibleVersions.map((aDatasetVersion, index) => (\n                <MenuItem\n                  key={aDatasetVersion.version}\n                  value={aDatasetVersion.version}\n                  sx={[\n                    (index === visibleVersions.length - 1) && {\n                      mb: -0.75\n                    },\n                    aDatasetVersion.isOlderVersion && {\n                      marginTop: '1rem',\n                      '&::before': {\n                        content: '\"\"',\n                        borderTop: `2px dotted ${theme.palette.text.secondary}`,\n                        width: '1rem',\n                        height: '1rem',\n                        position: 'absolute',\n                        top: 0,\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)'\n                      }\n                    }\n                  ]}\n                >\n                  <Stack direction=\"row\" alignItems=\"center\">\n                    {aDatasetVersion.version}\n                    { /* 'LATEST' chip for latest version */}\n                    {aDatasetVersion === latestVersionOfThisDataset &&\n                      <Tooltip title=\"Latest version\" enterDelay={0} leaveDelay={200}>\n                        <Avatar sx={{\n                          ml: 0.5,\n                          width: '1rem',\n                          height: '1rem',\n                          background: theme.palette.success.main\n                        }}>\n                          <PublishedWithChangesIcon sx={{ width: '0.8rem', height: '0.8rem' }} />\n                        </Avatar>\n                      </Tooltip>\n                    }\n                  </Stack>\n                </MenuItem>\n              ))}\n\n              {shouldShowCalendar && <MenuItem\n                key=\"Calendar\"\n                value=\"Calendar\"\n                sx={{ pt: 1, mt: 1, mb: -0.75, borderTop: '0.5px solid' }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\">\n                  Older Versions\n                  <EventIcon fontSize='small' sx={{ ml: 0.5 }} />\n                </Stack>\n              </MenuItem>\n              }\n            </Select>\n          </FormControl>\n        </TableCell>\n        <TableCell sx={{ background: isPreviewing && theme.palette.background.NYUpurpleLight }}>\n          {formatFileSize(selectedVersionOfThisDataset?.sizeInBytes)}\n        </TableCell>\n      </TableRow >\n    </>\n  )\n}\n\nconst PreviewDataset = (props) => {\n  const { previewingDataset, previewingDatasetId, project, smallScreen } = props;\n  const downloadDatasetName = `[${project.id}] ${previewingDataset?.name}-${previewingDataset?.version}.csv`;\n\n  const theme = useTheme();\n\n  const downloadPreviewingDataset = () => {\n    if (!previewingDataset?.fetchedDataset) return;\n\n    const blob = new Blob([previewingDataset?.fetchedDataset], { type: 'application/octet-stream' }); // create a Blob with the raw data\n    const url = URL.createObjectURL(blob); // create a download link for the Blob\n    const downloadLink = document.createElement('a');\n    downloadLink.href = url;\n    downloadLink.download = downloadDatasetName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click(); // simulate a click on the download link\n    URL.revokeObjectURL(url); // clean up by revoking the object URL\n    document.body.removeChild(downloadLink);\n  };\n\n  const [formattedData, setFormattedData] = useState('');\n  const [rowIndices, setRowIndices] = useState('');\n  const numFirstLastRowsToPreview = 5;\n\n  useEffect(() => {\n    if (!previewingDataset?.fetchedDataset) return;\n\n    const csvData = previewingDataset?.fetchedDataset;\n    const lines = csvData.split('\\n');\n    const numRows = lines.length;\n\n    if (numRows <= numFirstLastRowsToPreview * 2) {\n      setFormattedData(csvData);\n      setRowIndices(Array.from({ length: numRows }, (_, index) => index + 1).join('\\n')); // +1 because rowNumber starts at 1 while index starts at 0\n    } else {\n\n      const firstRows = lines.slice(0, numFirstLastRowsToPreview);\n      const lastRows = lines.slice(numRows - numFirstLastRowsToPreview);\n\n      const numOfHiddenRows = numRows - 2 * numFirstLastRowsToPreview;\n\n      const middleRow = [`... [${numOfHiddenRows} rows hidden] ...`];\n\n      setFormattedData(firstRows.concat(middleRow).concat(lastRows).join('\\n'));\n      setRowIndices(\n        Array.from({\n          length: numFirstLastRowsToPreview * 2 + 1 // +1 to account for the middleRow\n        },\n          (_, index) => {\n            const rowIndex = index + 1; // +1 because rowNumber starts at 1 while index starts at 0\n            // Indices for the first rows\n            if (rowIndex < numFirstLastRowsToPreview + 1) {\n              return rowIndex;\n            }\n            // No index for the middle row\n            else if (rowIndex == numFirstLastRowsToPreview + 1) {\n              return '';\n            }\n            // Indices for the last rows\n            else {\n              return numOfHiddenRows + rowIndex - 1;\n            }\n          })\n          .join('\\n'));\n    }\n\n  }, [previewingDataset]);\n\n  return (\n    <Stack spacing={1}>\n      <Box sx={{ '& *': { fontFamily: \"monospace !important\" } }}>\n        <Stack direction=\"row\">\n          <Typography variant='body2' gutterBottom fontWeight={600}>\n            {previewingDataset ?\n              `Previewing: ${previewingDataset.name} (${previewingDataset?.version})`\n              : 'Not previewing any dataset'}\n          </Typography>\n        </Stack>\n\n        <Box\n          component=\"pre\"\n          sx={{\n            overflowX: 'auto',\n            color: theme.palette.text.secondary,\n            backgroundColor: theme.palette.customBackground,\n            p: 2,\n            pt: 1.5,\n            borderRadius: theme.spacing(1),\n            borderTopLeftRadius: 0,\n            minHeight: \"5rem\",\n            width: smallScreen ? '100%' : 'unset',\n            marginTop: 0\n          }}\n        >\n          <Stack direction=\"row\" sx={{ fontSize: smallScreen ? '0.625rem !important' : '0.8rem !important' }}>\n            <Box sx={{ mr: 2, userSelect: 'none' }}>\n              {rowIndices}\n            </Box>\n            <Box>\n              {formattedData}\n            </Box>\n          </Stack>\n        </Box>\n      </Box>\n      <Box textAlign=\"center\" >\n        <Button\n          variant=\"contained\"\n          sx={{\n            textTransform: 'none',\n            textAlign: 'left',\n            lineHeight: 1.1,\n            px: 1.5,\n            py: 1\n          }}\n          onClick={() => {\n            downloadPreviewingDataset();\n            Tracking.sendEventAnalytics(Tracking.Events.rawDatasetDownloaded, {\n              project_id: project.id,\n              dataset_id: previewingDatasetId,\n              dataset_name: previewingDataset.name,\n              dataset_version: previewingDataset.version\n            });\n          }}\n          disabled={!previewingDataset}\n        >\n          <DownloadIcon sx={{ fontSize: '1.25rem', mr: 0.5 }} />\n          {previewingDataset ? downloadDatasetName : \"No dataset available to download\"}\n        </Button>\n      </Box>\n    </Stack >\n  )\n}","import { useState, useRef } from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport parse from 'html-react-parser';\nimport { useMediaQuery, useTheme } from '@mui/material';\nimport { replacePlainHTMLWithMuiComponents } from '../Utils/Utils';\n\nfunction CollapsibleSubtitle({ text, wordLimit = 60, reference }) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const subtitleRef = useRef(null);\n\n  const words = text.split(' ');\n\n  // If not on mobile or words are within limit, just display the full text\n  if (!isMobile || words.length / wordLimit <= 1.4) {\n    return (\n      <Box>\n        <Typography>{parse(text, { replace: replacePlainHTMLWithMuiComponents })}</Typography>\n        {reference && (\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            {parse(reference, { replace: replacePlainHTMLWithMuiComponents })}\n          </Typography>\n        )}\n      </Box>\n    );\n  }\n\n  let displayText = words.slice(0, wordLimit).join(' ');\n  const lastFullStop = displayText.lastIndexOf('.');\n\n  if (lastFullStop !== -1) {\n    displayText = displayText.slice(0, lastFullStop + 1);\n  }\n\n  // Do not collapse if the user clicks on the chart associated with the subtitle\n  const isClickWithinSharedParent = (event) => {\n    let { target } = event;\n    // .MuiContainer-root - Container for both the subtitle and the chart\n    const subtitleParent = subtitleRef.current.closest('.MuiContainer-root');\n    // Elements used to detect if the click is on a chart\n    const chartElements = new Set(['rect', 'path', 'svg', 'circle']);\n\n    while (target != null) {\n      // Check if a chart is clicked\n      if (chartElements.has(target.tagName)) {\n        // If the chart element and the subtitle element share the same container\n        // it means that the click is on the chart associated with the subtitle\n        // As such, we should not collapse the subtitle\n        const targetParent = target.closest('.MuiContainer-root');\n        return targetParent === subtitleParent;\n      }\n      target = target.parentNode; // Move up the DOM tree\n    }\n    return false;\n  };\n\n  // Custom onClickAway handler\n  const handleOnClickAway = (event) => {\n    if (!isClickWithinSharedParent(event)) {\n      setIsExpanded(false);\n    }\n  };\n\n  return (\n    <ClickAwayListener onClickAway={handleOnClickAway}>\n      <Box ref={subtitleRef} onClick={() => setIsExpanded(!isExpanded)} style={{ cursor: 'pointer' }}>\n        {isExpanded ? (\n          <>\n            <Typography>{parse(text, { replace: replacePlainHTMLWithMuiComponents })}</Typography>\n            {reference && <Typography variant=\"caption\" color=\"text.secondary\">{parse(reference, { replace: replacePlainHTMLWithMuiComponents })}</Typography>}\n          </>\n        ) : (\n          <>\n            <Typography display=\"inline\">\n              {parse(displayText, { replace: replacePlainHTMLWithMuiComponents })}\n              ...\n            </Typography>\n            <Typography display=\"inline\" color=\"text.primary\" fontWeight=\"500\" sx={{ ml: 0.5, '& :hover': { textDecoration: 'underline' } }}>\n              See more\n            </Typography>\n          </>\n        )}\n      </Box>\n    </ClickAwayListener>\n  );\n}\n\nexport default CollapsibleSubtitle;\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LinkContext } from '../ContextProviders/LinkContext';\nimport { TabContext } from '../ContextProviders/TabContext';\nimport { useNavigate } from 'react-router-dom';\nimport parse from 'html-react-parser';\nimport ChartComponent from '../Graphs/ChartComponent';\nimport UppercaseTitle from '../Components/UppercaseTitle';\nimport CommentSection from '../Components/CommentSection';\nimport { Box, Typography, Container, Divider, Chip, Grid, Tooltip } from '@mui/material';\n\nimport { useTheme } from '@mui/material/styles';\n\nimport ThemePreferences from '../Themes/ThemePreferences';\n\nimport data from '../temp_database.json';\nimport jsonData from '../section_data.json';\n\nimport PersonIcon from '@mui/icons-material/Person';\nimport EmailIcon from '@mui/icons-material/Email';\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport CommentIcon from '@mui/icons-material/Comment';\n\nimport { replacePlainHTMLWithMuiComponents } from '../Utils/Utils';\nimport DatasetDownloadDialog from '../Components/DatasetDownload/DatasetDownloadDialog';\n\nimport { scrollToSection } from '../Components/Header/MenuItemAsNavLink';\nimport FullWidthBox from '../Components/FullWidthBox';\n\nimport * as Tracking from '../Utils/Tracking';\n\nimport { CommentCountsContext } from '../ContextProviders/CommentCountsContext';\n\nimport { RawDatasetsMetadataContext } from '../ContextProviders/RawDatasetsMetadataContext';\n\n// Might be used in the future to display a customized table instead of the regular ChartComponent\n// import ChartSubstituteComponentLoader from '../../Graphs/ChartSubstituteComponents/ChartSubstituteComponentLoader';\n\nimport CollapsibleSubtitle from '../Components/CollapsibleSubtitle';\nimport { PreferenceContext } from '../ContextProviders/PreferenceContext';\n\n// Custom Chip component to display metadata\nconst CustomChip = (props) => {\n  const { tooltipTitle, ...otherProps } = props;\n  return (\n    <Tooltip title={tooltipTitle} enterDelay={0} leaveDelay={200}>\n      <Chip\n        size=\"small\"\n        {...otherProps}\n      />\n    </Tooltip>\n  );\n}\n\nconst Project = () => {\n  const { themePreference } = useContext(PreferenceContext);\n  const { setCurrentPage, chartsTitlesList, setChartsTitlesList } = useContext(LinkContext);\n  const { tab, setTab } = useContext(TabContext);\n\n  const { id } = useParams();\n  const [project, setProject] = useState({});\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const commentCounts = useContext(CommentCountsContext);\n  const thisProjectCommentCount = commentCounts[project.id];\n\n  const rawDatasetsMetadata = useContext(RawDatasetsMetadataContext);\n  const [lastUpdate, setLastUpdate] = useState(null);\n\n  const theme = useTheme();\n\n  // Update the currentPage with the project's ID\n  // and the chartsTitle with all the charts' titles of the project\n  useEffect(() => {\n    // find the project with the matching id\n    const project = data.find((project) => project.id === id);\n\n    let chartsTitles = [];\n    if (project) {\n      setProject({ ...project });\n      let temp = {};\n      for (let i = 0; i < project.charts.length; i++) {\n        temp[i] = 0;\n      }\n      setTab(temp);\n      setLoading(true);\n      // Populate the array with all the charts' titles of the project\n      chartsTitles = project.charts.map((element, index) => ({ chartTitle: element.title, chartID: `chart-${index + 1}` }));\n    } else {\n      setCurrentPage('404');\n      navigate('/404', { replace: true });\n    }\n\n    setCurrentPage(\"project\");\n    setChartsTitlesList(chartsTitles);\n\n  }, [id, setCurrentPage, setChartsTitlesList]);\n\n  // Update the page's title\n  useEffect(() => { if (project.title) document.title = `${project.title} | CITIES Dashboard`, [project] });\n\n  // Update the project's last update date based on dataset versions\n  useEffect(() => {\n    if (!rawDatasetsMetadata) return;\n\n    const projectDatasets = rawDatasetsMetadata[project.id];\n    if (!projectDatasets) return;\n\n    // Get the latest version of each dataset\n    const datasetVersions = projectDatasets.flatMap(dataset => dataset.versions ? dataset.versions[0].version : [])\n\n    // Find the latest version\n    const lastUpdate = datasetVersions.length > 0 ? datasetVersions.reduce((a, b) => a > b ? a : b) : null;\n\n    setLastUpdate(lastUpdate);\n\n  }, [rawDatasetsMetadata, project.id]);\n\n  return (\n    <>\n      {loading && (\n        <Box width=\"100%\">\n          <FullWidthBox backgroundColor='customAlternateBackground'>\n            <Container sx={{ pt: 5, pb: 3 }}>\n\n              <UppercaseTitle text={project.title} />\n\n              <Grid container spacing={1} sx={{ pb: 3, mt: -3 }}>\n                <Grid item>\n                  <CustomChip\n                    icon={<PersonIcon />}\n                    label={project.owner}\n                    tooltipTitle=\"Dataset Owner\"\n                  />\n                </Grid>\n\n                <Grid item>\n                  <CustomChip\n                    icon={<EmailIcon />}\n                    label={project.contact}\n                    tooltipTitle=\"Contact\"\n                    component=\"a\"\n                    href={`mailto:${project.contact}`}\n                    clickable\n                  />\n                </Grid>\n\n                <Grid item>\n                  <CustomChip\n                    icon={<BarChartIcon />}\n                    label={`${project.charts.length} Chart${project.charts.length > 1 && \"s\"}`}\n                    tooltipTitle=\"Number of Charts\"\n                    onClick={() => {\n                      scrollToSection(jsonData.charts.id);\n                      Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n                        {\n                          destination_id: jsonData.charts.id,\n                          destination_label: jsonData.project.toString(),\n                          origin_id: 'chip'\n                        })\n                    }}\n                  />\n                </Grid>\n\n                {\n                  lastUpdate &&\n                  <Grid item>\n                    <CustomChip\n                      icon={<PublishedWithChangesIcon />}\n                      label={`Last update: ${lastUpdate}`}\n                      tooltipTitle=\"Last Update\" />\n                  </Grid>\n                }\n\n                {thisProjectCommentCount != null &&\n                  <Grid item>\n                    <CustomChip\n                      icon={<CommentIcon />}\n                      label={`${thisProjectCommentCount} Comment${thisProjectCommentCount > 1 ? \"s\" : \"\"}`}\n                      tooltipTitle=\"Number of Comments\"\n                      onClick={() => {\n                        scrollToSection(jsonData.commentSection.id);\n                        Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n                          {\n                            destination_id: jsonData.commentSection.id,\n                            destination_label: jsonData.commentSection.toString(),\n                            origin_id: 'chip'\n                          })\n                      }}\n                    />\n                  </Grid>}\n              </Grid>\n\n              <Typography\n                component=\"div\"\n                variant=\"body1\"\n                color=\"text.secondary\"\n                sx={{\n                  textAlign: 'justify', pb: 3, mb: 0, \"& table *\": {\n                    color: `${theme.palette.text.secondary}`\n                  }\n                }}\n                gutterBottom\n              >\n                {project.description ? parse(project.description, {\n                  replace: replacePlainHTMLWithMuiComponents,\n                }) : \"No project description\"}\n              </Typography>\n\n              <DatasetDownloadDialog project={project} />\n            </Container>\n          </FullWidthBox>\n\n          <Box id={jsonData.charts.id}>\n            {project.charts.map((element, index) => (\n              <FullWidthBox\n                id={chartsTitlesList[index].chartID} // set the chartWrapper's ID to help Navbar in Header scroll to\n                key={index}\n                backgroundColor={\n                  index % 2 != 0 && 'customAlternateBackground'\n                }\n              >\n                <Container\n                  sx={{ pt: 4, pb: 4 }}\n                  height=\"auto\"\n                  className={themePreference === ThemePreferences.dark ? 'dark' : ''}\n                >\n                  <Typography variant=\"h6\" color=\"text.primary\">\n                    {index + 1}. {element.title}\n                  </Typography>\n\n                  {/* For future reference: Either display the regular ChartComponent, or substitute \n                  with a customized component in ../../Graphs/ChartSubstituteComponents/ (if specified) */}\n                  {/* {element.chartSubstituteComponentName ?\n                    <ChartSubstituteComponentLoader chartSubstituteComponentName={element.chartSubstituteComponentName} />\n                    : (\n                      <ChartComponent\n                        chartData={{\n                          chartIndex: index,\n                          sheetId: project.sheetId,\n                          ...element,\n                        }}\n                      />\n                    )} */}\n\n                  <ChartComponent\n                    chartData={{\n                      chartIndex: index,\n                      sheetId: project.sheetId,\n                      ...element,\n                    }}\n                  />\n                  <Box sx={{ my: 3 }}>\n                    <Typography\n                      component=\"div\"\n                      variant=\"body1\"\n                      color=\"text.secondary\"\n                      sx={{ mb: 1 }}\n                    >\n                      {element.subtitle &&\n                        <CollapsibleSubtitle\n                          text={element.subtitle}\n                          reference={element.reference ? element.reference : undefined}\n                        />\n                      }\n                      {Object.keys(tab)[index] == index &&\n                        element.subcharts &&\n                        element.subcharts[Object.values(tab)[index]].subchartSubtitle &&\n                        <CollapsibleSubtitle\n                          text={element.subcharts[Object.values(tab)[index]].subchartSubtitle}\n                          reference={element.subcharts[Object.values(tab)[index]].reference ? element.subcharts[Object.values(tab)[index]].reference : undefined}\n                        />\n                      }\n                    </Typography>\n                  </Box>\n                </Container>\n              </FullWidthBox>\n            ))}\n          </Box>\n\n          <Divider />\n\n          <FullWidthBox id={jsonData.commentSection.id} sx={{ pt: 3, pb: 4 }}>\n            <CommentSection pageID={project.id} />\n          </FullWidthBox>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default Project;\n"],"names":["HighlightedDay","styled","PickersDay","content","fontSize","bottom","position","color","theme","palette","primary","main","opacity","CustomDayComponent","props","versionDates","day","other","indexOf","dayjs","format","DatasetCalendar","smallScreen","onChange","versions","filter","version","length","map","ClickAwayListener","onClickAway","Card","sx","right","zIndex","raised","LocalizationProvider","dateAdapter","AdapterDayjs","DateCalendar","loading","renderLoading","DayCalendarSkeleton","slots","value","selectionState","slotProps","shouldDisableDate","date","disableHighlightToday","minDate","slice","maxDate","DatasetDownloadDialog","project","rawDatasetsMetadata","useContext","RawDatasetsMetadataContext","useState","datasets","setDatasets","useEffect","id","useTheme","useMediaQuery","breakpoints","down","open","setOpen","handleClose","Button","onClick","Tracking","project_id","variant","DataObject","Dialog","onClose","maxWidth","fullWidth","fullScreen","keepMounted","DialogActions","justifyContent","autoFocus","ChevronLeft","DialogContent","px","display","flexDirection","alignItems","height","Chip","label","title","size","mb","Typography","DatasetSelectorAndPreviewer","my","fontStyle","owner","Link","href","previewingDataset","setPreviewingDataset","previewingDatasetId","setPreviewingDatasetId","fetchDataFromURL","rawLink","then","data","fetchedDataset","Grid","container","spacing","item","sm","md","DatasetsTable","mt","PreviewDataset","Table","tableLayout","TableHead","TableRow","TableCell","pl","width","TableBody","dataset","Dataset","isPreviewing","fetchedDatasets","setFetchedDatasets","latestVersionOfThisDataset","showCalendar","setShowCalendar","selectedVersionOfThisDataset","setSelectedVersionOfThisDataset","visibleVersions","find","push","isOlderVersion","shouldShowCalendar","handleVersionChange","event","selectedVal","target","selectedVersion","aDatasetVersion","fetchThisDataset","handleCalendarChange","selectedVersionWithFetchedDataset","setThisDatasetToPreview","cursor","background","NYUpurpleLight","name","Modal","FormControl","Select","MenuProps","disablePortal","index","MenuItem","marginTop","borderTop","text","secondary","top","left","transform","Stack","direction","Tooltip","enterDelay","leaveDelay","Avatar","ml","success","PublishedWithChanges","pt","Event","sizeInBytes","toFixed","formatFileSize","downloadDatasetName","formattedData","setFormattedData","rowIndices","setRowIndices","csvData","lines","split","numRows","numFirstLastRowsToPreview","Array","from","_","join","firstRows","lastRows","numOfHiddenRows","middleRow","concat","rowIndex","Box","fontFamily","gutterBottom","fontWeight","component","overflowX","backgroundColor","customBackground","p","borderRadius","borderTopLeftRadius","minHeight","mr","userSelect","textAlign","textTransform","lineHeight","py","blob","Blob","type","url","URL","createObjectURL","downloadLink","document","createElement","download","body","appendChild","click","revokeObjectURL","removeChild","downloadPreviewingDataset","dataset_id","dataset_name","dataset_version","disabled","Download","wordLimit","reference","isExpanded","setIsExpanded","isMobile","subtitleRef","useRef","words","parse","replace","replacePlainHTMLWithMuiComponents","displayText","lastFullStop","lastIndexOf","subtitleParent","current","closest","chartElements","Set","has","tagName","parentNode","isClickWithinSharedParent","ref","style","textDecoration","CustomChip","tooltipTitle","otherProps","themePreference","PreferenceContext","LinkContext","setCurrentPage","chartsTitlesList","setChartsTitlesList","TabContext","tab","setTab","useParams","setProject","setLoading","navigate","useNavigate","thisProjectCommentCount","CommentCountsContext","lastUpdate","setLastUpdate","chartsTitles","temp","i","charts","element","chartTitle","chartID","projectDatasets","datasetVersions","flatMap","reduce","a","b","FullWidthBox","Container","pb","UppercaseTitle","icon","Person","Email","contact","clickable","BarChart","scrollToSection","jsonData","destination_id","destination_label","origin_id","Comment","description","className","ThemePreferences","ChartComponent","chartData","chartIndex","sheetId","subtitle","undefined","Object","keys","subcharts","values","subchartSubtitle","Divider","CommentSection","pageID"],"sourceRoot":""}